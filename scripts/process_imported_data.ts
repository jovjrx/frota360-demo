import fetch from 'node-fetch';

async function processImportedData() {
  const importId = "2025-W40-1759789137950"; // O importId gerado anteriormente
  const processApiUrl = "http://localhost:3000/api/admin/imports/process";

  console.log(`Chamando a API de processamento para importId: ${importId}`);

  try {
    // Simular uma requisi√ß√£o interna, que deve ter acesso √† sess√£o
    // Em um ambiente de produ√ß√£o real, esta API seria chamada via frontend autenticado
    // ou por um servi√ßo backend com credenciais apropriadas.
    // Para simular, vamos usar um fetch simples, mas o middleware de autentica√ß√£o pode barrar.
    // A melhor forma √© usar o frontend para acionar.

    // No entanto, como o objetivo √© testar a l√≥gica da API, vamos tentar simular o m√°ximo poss√≠vel.
    // Se a autentica√ß√£o for o problema, teremos que ajustar a API para aceitar um token de servi√ßo
    // ou simular a sess√£o de forma mais robusta.

    const response = await fetch(processApiUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        // Em um ambiente de teste/desenvolvimento, podemos simular a sess√£o
        // mas isso depende de como o NextAuth/IronSession est√° configurado para aceitar.
        // Por enquanto, vamos tentar sem um cookie expl√≠cito, confiando que o tsx
        // pode ter algum contexto ou que a API pode ser chamada sem auth em dev.
      },
      body: JSON.stringify({ importId }),
    });

    const data = await response.json();

    if (response.ok) {
      console.log("üéâ Processamento conclu√≠do com sucesso!");
      console.log(JSON.stringify(data, null, 2));
    } else {
      console.error("‚ùå Erro no processamento:", response.status, response.statusText);
      console.error(JSON.stringify(data, null, 2));
    }
  } catch (error) {
    console.error("‚ùå Erro ao chamar a API de processamento:", error);
  }
}

processImportedData();

