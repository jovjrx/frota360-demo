// ============================================================================
// ADICIONAR NO ARQUIVO: pages/admin/weekly/index.tsx
// ============================================================================

// 1. ADICIONAR NO IMPORT (linha ~30)
import { FiFileText } from 'react-icons/fi';

// 2. ADICIONAR NO STATE (linha ~70, junto com outros useState)
const [isGeneratingResumos, setIsGeneratingResumos] = useState(false);

// 3. ADICIONAR FUNÇÃO (linha ~100, junto com outras funções)
const handleGenerateResumos = async () => {
  setIsGeneratingResumos(true);
  try {
    const selectedWeek = weekOptions.find(w => w.value === filterWeek);
    if (!selectedWeek) {
      toast({
        title: 'Erro',
        description: 'Selecione uma semana',
        status: 'error',
        duration: 3000,
      });
      return;
    }

    const response = await fetch('/api/admin/weekly/generate-all', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        weekStart: selectedWeek.start,
        weekEnd: selectedWeek.end,
      }),
    });

    if (!response.ok) {
      throw new Error('Erro ao gerar resumos');
    }

    // Download do arquivo ZIP
    const blob = await response.blob();
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `Resumos_${selectedWeek.start}_a_${selectedWeek.end}.zip`;
    document.body.appendChild(a);
    a.click();
    window.URL.revokeObjectURL(url);
    document.body.removeChild(a);

    toast({
      title: 'Resumos gerados com sucesso!',
      description: 'O arquivo ZIP contém o Excel e os PDFs individuais',
      status: 'success',
      duration: 5000,
    });
  } catch (error) {
    console.error('Erro ao gerar resumos:', error);
    toast({
      title: 'Erro ao gerar resumos',
      description: 'Tente novamente',
      status: 'error',
      duration: 5000,
    });
  } finally {
    setIsGeneratingResumos(false);
  }
};

// 4. ADICIONAR BOTÃO (linha ~230, no HStack com outros botões)
// Procure por: <HStack spacing={2}>
// E adicione este botão junto com "Importar Dados", "Atualizar", "Exportar CSV"

<Button
  leftIcon={<Icon as={FiFileText} />}
  onClick={handleGenerateResumos}
  colorScheme="purple"
  size="sm"
  isLoading={isGeneratingResumos}
  loadingText="Gerando..."
>
  Gerar Resumos
</Button>

