/**
 * Processador de Pagamentos Semanais
 * Este √© o √öNICO lugar onde os dados s√£o processados e driverPayments √© criado
 * Invocado apenas da aba DADOS (WeeklyDataTabContent)
 */

import { adminDb } from '@/lib/firebaseAdmin';
import { getAdminFeeConfig, computeAdminFeeForDriver, AdminFeeConfig } from '@/lib/finance/admin-fee';
import { DriverPayment, ProcessingResult } from '@/types/driver-payment';

export async function processWeeklyPayments(weekId: string): Promise<ProcessingResult[]> {
  const results: ProcessingResult[] = [];
  // Carregar configura√ß√£o global uma vez
  const adminFeeConfig = await getAdminFeeConfig();

  try {
    // 1. Buscar dataWeekly desta semana
    const weeklySnap = await adminDb
      .collection('dataWeekly')
      .where('weekId', '==', weekId)
      .get();

    console.log(`[process-payments] üìä Encontrados ${weeklySnap.size} registros em dataWeekly para ${weekId}`);

    if (weeklySnap.empty) {
      console.log(`‚ö†Ô∏è Nenhum registro em dataWeekly para ${weekId}. Nada a processar.`);
      return results;
    }

    // 2. Carregar TODOS os motoristas e construir mapas de busca
    const driversSnap = await adminDb.collection('drivers').get();
    const driversById = new Map<string, any>();
    const driversByUber = new Map<string, any>();
    const driversByBolt = new Map<string, any>();
    const driversByMyPrio = new Map<string, any>();
    const driversByPlate = new Map<string, any>();

    driversSnap.docs.forEach(doc => {
      const driver = { id: doc.id, ...doc.data() } as any;
      driversById.set(doc.id, driver);

      const integrations = (driver?.integrations || {}) as any;
      
      // Uber UUID
      const uberKey = typeof integrations.uber === 'string' 
        ? integrations.uber 
        : integrations.uber?.key;
      if (uberKey) driversByUber.set(uberKey.toLowerCase(), driver);

      // Bolt email
      const boltKey = typeof integrations.bolt === 'string'
        ? integrations.bolt
        : integrations.bolt?.key;
      if (boltKey) driversByBolt.set(boltKey.toLowerCase(), driver);

      // MyPrio cart√£o
      const myprioKey = typeof integrations.myprio === 'string'
        ? integrations.myprio
        : integrations.myprio?.key;
      if (myprioKey) driversByMyPrio.set(myprioKey.toLowerCase(), driver);

      // Placa do ve√≠culo (para MyPrio e ViaVerde)
      const plate = (driver?.vehicle as any)?.plate;
      if (plate) {
        const cleanPlate = plate.toLowerCase().replace(/[^a-z0-9]/g, '');
        driversByPlate.set(cleanPlate, driver);
      }
    });

    console.log(`[process-payments] üìã Mapas criados: ${driversById.size} motoristas, ${driversByUber.size} Uber, ${driversByBolt.size} Bolt, ${driversByMyPrio.size} MyPrio, ${driversByPlate.size} placas`);

    // 3. Agrupar entradas por driverId (com fallback autom√°tico)
    const entriesByDriver = new Map<string, any[]>();
    let mappedCount = 0;
    let fallbackCount = 0;
    let skippedCount = 0;
    
    weeklySnap.docs.forEach((doc) => {
      const data = doc.data() as any;
      let driver: any = null;
      let mappingMethod = '';

      // Tentar usar driverId direto
      if (data.driverId && typeof data.driverId === 'string' && data.driverId.length > 0) {
        driver = driversById.get(data.driverId);
        if (driver) {
          mappedCount++;
          mappingMethod = 'driverId direto';
        }
      }

      // FALLBACK: Tentar mapear pelo referenceId (UUID/email/cart√£o) ou placa
      if (!driver && data.referenceId) {
        const refId = data.referenceId.toLowerCase();
        
        if (data.platform === 'uber') {
          driver = driversByUber.get(refId);
          if (driver) {
            fallbackCount++;
            mappingMethod = 'Uber UUID';
          }
        } else if (data.platform === 'bolt') {
          driver = driversByBolt.get(refId);
          if (driver) {
            fallbackCount++;
            mappingMethod = 'Bolt email';
          }
        } else if (data.platform === 'myprio') {
          driver = driversByMyPrio.get(refId);
          if (driver) {
            fallbackCount++;
            mappingMethod = 'MyPrio cart√£o';
          }
        }
      }

      // FALLBACK 2: Tentar pela placa (para MyPrio e ViaVerde)
      if (!driver && data.vehiclePlate) {
        const cleanPlate = data.vehiclePlate.toLowerCase().replace(/[^a-z0-9]/g, '');
        driver = driversByPlate.get(cleanPlate);
        if (driver) {
          fallbackCount++;
          mappingMethod = 'placa ve√≠culo';
        }
      }

      if (!driver) {
        skippedCount++;
        console.log(`‚ö†Ô∏è Registro N√ÉO MAPEADO: plataforma=${data.platform}, ref=${data.referenceId}, placa=${data.vehiclePlate || 'N/A'}, nome=${data.driverName || 'N/A'}`);
        return;
      }

      if (!entriesByDriver.has(driver.id)) {
        entriesByDriver.set(driver.id, []);
      }
      entriesByDriver.get(driver.id)!.push({ id: doc.id, ...data });
      
      if (fallbackCount <= 5) { // Mostrar apenas os primeiros 5 para n√£o poluir
        console.log(`   ‚úÖ Mapeado ${driver.fullName || driver.name} via ${mappingMethod}`);
      }
    });

    console.log(`\n[process-payments] üìä MAPEAMENTO:`);
    console.log(`   ‚úÖ ${mappedCount} registros mapeados diretamente (driverId)`);
    console.log(`   üîÑ ${fallbackCount} registros mapeados via fallback (UUID/email/placa)`);
    console.log(`   ‚ùå ${skippedCount} registros ignorados (n√£o encontrado)`);
    console.log(`   üë• ${entriesByDriver.size} motoristas com dados\n`);

    if (entriesByDriver.size === 0) {
      console.log(`‚ùå PROBLEMA: Nenhum motorista foi mapeado dos ${weeklySnap.size} registros.`);
      console.log(`üí° SOLU√á√ÉO: Verifique os cadastros de integra√ß√µes (Uber UUID, Bolt email, MyPrio cart√£o, placas)`);
      return results;
    }

    // 4. Para cada motorista com dados: filtrar ativos e processar
    for (const [driverId, entries] of entriesByDriver.entries()) {
      const driver = driversById.get(driverId);
      
      if (!driver) {
        console.log(`‚ö†Ô∏è Driver ${driverId} n√£o encontrado (bug interno - ${entries.length} registros ignorados)`);
        continue;
      }
      
      // Filtrar ativo
      const isActive = driver?.status === 'active' || driver?.isActive === true;
      if (!isActive) {
        console.log(`‚ö†Ô∏è Driver ${driver.fullName || driver.name} (${driverId}) est√° INATIVO - ignorando ${entries.length} registros`);
        continue;
      }

      console.log(`\n‚úÖ Processando ${driver.fullName || driver.name} (${driverId}): ${entries.length} registros`);

      try {
        const payment = await processDriverPaymentFromEntries(driver, weekId, adminFeeConfig, entries);
        if (payment) {
          console.log(`   üí∞ Pagamento criado: repasse=‚Ç¨${payment.repasse.toFixed(2)}, financiamento=${payment.financingDetails ? '‚Ç¨' + payment.financingDetails.displayAmount.toFixed(2) : 'N/A'}`);
          results.push({
            success: true,
            driverId: driver.id,
            driverName: driver.fullName || driver.name,
            weekId,
            payment,
          });
        } else {
          console.log(`   ‚ö†Ô∏è Nenhum pagamento gerado (provavelmente sem dados v√°lidos)`);
        }
      } catch (error: any) {
        console.error(`   ‚ùå ERRO ao processar ${driver.fullName || driver.name}: ${error.message}`);
        results.push({
          success: false,
          driverId: driver.id,
          driverName: driver.fullName || driver.name,
          weekId,
          error: error.message,
        });
      }
    }

    console.log(`\n[process-payments] üìä RESUMO FINAL:`);
    const successCount = results.filter(r => r.success).length;
    const errorCount = results.filter(r => !r.success).length;
    console.log(`   ‚úÖ Sucessos: ${successCount}`);
    console.log(`   ‚ùå Erros: ${errorCount}`);
    console.log(`   üìù Total processado: ${results.length} motoristas`);
    
    if (errorCount > 0) {
      console.log(`\n‚ö†Ô∏è MOTORISTAS COM ERRO:`);
      results.filter(r => !r.success).forEach(r => {
        console.log(`   - ${r.driverName}: ${r.error}`);
      });
    }
    console.log();

    return results;
  } catch (error: any) {
    console.error(`‚ùå Erro ao processar pagamentos da semana ${weekId}:`, error);
    throw error;
  }
}

async function processDriverPaymentFromEntries(driver: any, weekId: string, adminFeeConfig: AdminFeeConfig, weeklyData: any[]): Promise<DriverPayment | null> {
  if (!Array.isArray(weeklyData) || weeklyData.length === 0) {
    console.log(`‚ö†Ô∏è Nenhum dataWeekly para motorista ${driver.id} semana ${weekId}`);
    return null;
  }

  console.log(`   üîç Processando ${weeklyData.length} entradas para ${driver.fullName || driver.name}`);

  // 2. Calcular ganhos por integra√ß√£o
  const ganhosPorIntegracao: Record<string, number> = {
    uber: 0,
    bolt: 0,
    myprio: 0,
    viaverde: 0,
  };

  weeklyData.forEach((data: any) => {
    const value = data.totalValue || 0;
    ganhosPorIntegracao[data.platform] = (ganhosPorIntegracao[data.platform] || 0) + value;
    console.log(`      - ${data.platform}: ‚Ç¨${value.toFixed(2)}`);
  });

  console.log(`   üí∞ Totais: Uber=‚Ç¨${ganhosPorIntegracao.uber.toFixed(2)}, Bolt=‚Ç¨${ganhosPorIntegracao.bolt.toFixed(2)}, Combust√≠vel=‚Ç¨${ganhosPorIntegracao.myprio.toFixed(2)}, Portagens=‚Ç¨${ganhosPorIntegracao.viaverde.toFixed(2)}`);

  const ganhosTotal = Object.values(ganhosPorIntegracao).reduce((a, b) => a + b, 0);
  const ivaValor = ganhosTotal * 0.06; // 6% IVA
  const ganhosMenosIVA = ganhosTotal - ivaValor;

  // 3. **TAXA ADM** - Usar fun√ß√£o centralizada e configur√°vel
  // Combust√≠vel e Portagens ser√£o considerados na base, assim como aluguel e financiamento

  // 4. **COMBUST√çVEL E PORTAGENS**
  const combustivel = ganhosPorIntegracao['myprio'] || 0;
  const portagensRaw = ganhosPorIntegracao['viaverde'] || 0;
  const driverType: 'renter' | 'affiliate' = (driver?.type === 'renter' || driver?.isLocatario) ? 'renter' : 'affiliate';
  const portagens = driverType === 'renter' ? portagensRaw : 0; // ViaVerde apenas para locat√°rios

  // 5. **ALUGUEL** (se locat√°rio)
  const aluguel = driverType === 'renter' ? (driver.rentalFee || 0) : 0;

  // 6. **FINANCIAMENTO** - Buscar empr√©stimos ativos
  let financingDetails: any = null;
  const financingSnap = await adminDb
    .collection('financing')
  .where('driverId', '==', driver.id)
    .get();

  console.log(`   üí≥ Financiamentos encontrados: ${financingSnap.size}`);

  if (!financingSnap.empty) {
    // Pode haver m√∫ltiplos financiamentos: agregamos semanal e juros percentuais
    const financings = financingSnap.docs
      .map(d => d.data() as any)
      .filter(f => {
        const status = f?.status || 'active';
        const isCompleted = status === 'completed';
        if (isCompleted) {
          console.log(`      ‚è≠Ô∏è Financiamento conclu√≠do ignorado: ‚Ç¨${f?.amount || 0}`);
        }
        return !isCompleted;
      });

    console.log(`   üí≥ Financiamentos ativos: ${financings.length}`);

    let totalWeekly = 0;
    let totalWeeklyInterestPercent = 0;
    let hasLoanType = false;
    let totalAmount = 0;
    for (const raw of financings) {
      const f = {
        ...raw,
        type: raw?.type || ((typeof raw?.weeks === 'number' && raw.weeks > 0) ? 'loan' : 'discount'),
      } as any;
      if (f.type === 'loan') hasLoanType = true;
      if (typeof f?.amount === 'number') totalAmount += f.amount;
      totalWeeklyInterestPercent += Number(f?.weeklyInterest || 0);
      let weekly = 0;
      if (typeof f?.weeklyAmount === 'number' && f.weeklyAmount > 0) {
        weekly = Number(f.weeklyAmount) || 0;
        console.log(`      ‚úì weeklyAmount definido: ‚Ç¨${weekly.toFixed(2)}`);
      } else if (f.type === 'loan' && f?.amount > 0) {
        const w = Number((f.remainingWeeks ?? f.weeks) || 0);
        weekly = w > 0 ? (Number(f.amount) || 0) / w : 0;
        console.log(`      ‚úì loan: amount=‚Ç¨${f.amount}, weeks=${w} ‚Üí parcela=‚Ç¨${weekly.toFixed(2)}`);
      } else if (f.type === 'discount') {
        weekly = Number(f.amount) || 0;
        console.log(`      ‚úì discount: ‚Ç¨${weekly.toFixed(2)}`);
      } else {
        console.log(`      ‚úó N√£o conseguiu calcular! weeklyAmount=${f?.weeklyAmount}, type=${f?.type}, amount=${f?.amount}, weeks=${f?.weeks}`);
      }
      totalWeekly += weekly;
    }
    const interestAmount = Math.round((totalWeekly * totalWeeklyInterestPercent / 100) * 100) / 100;
    const weeklyWithFees = Math.round((totalWeekly + interestAmount) * 100) / 100;
    
    console.log(`   üí∞ Financiamento total: parcela=‚Ç¨${totalWeekly.toFixed(2)}, juros=‚Ç¨${interestAmount.toFixed(2)}, total=‚Ç¨${weeklyWithFees.toFixed(2)}`);
    
    financingDetails = {
      type: hasLoanType ? 'loan' : 'discount',
      amount: totalAmount,
      weeklyAmount: totalWeekly,
      weeklyInterest: totalWeeklyInterestPercent,
      displayAmount: weeklyWithFees,
      totalCost: weeklyWithFees,
      hasFinancing: weeklyWithFees > 0,
      isParcelado: hasLoanType,
      displayLabel: `Parcela: ‚Ç¨${weeklyWithFees.toFixed(2)}`,
      // Campos legados/compat
      interestPercent: totalWeeklyInterestPercent,
      interestAmount,
      weeklyWithFees,
      installment: totalWeekly,
    };
  } else {
    console.log(`   ‚ÑπÔ∏è Nenhum financiamento ativo para este motorista`);
    // ‚úÖ IMPORTANTE: Definir como objeto vazio (n√£o undefined) para evitar erro no Firestore
    financingDetails = {
      type: 'discount',
      amount: 0,
      weeklyAmount: 0,
      weeklyInterest: 0,
      displayAmount: 0,
      totalCost: 0,
      hasFinancing: false,
      isParcelado: false,
      displayLabel: 'Sem financiamento',
      interestPercent: 0,
      interestAmount: 0,
      weeklyWithFees: 0,
      installment: 0,
    };
  }

  // 3b. **TAXA ADM** depende tamb√©m de financiamento (parcela+juros) e aluguel
  const financingCostForBase = financingDetails?.weeklyWithFees || financingDetails?.totalCost || 0;
  const feeCtx = {
    ganhosBrutos: ganhosTotal,
    ivaValor,
    combustivel,
    portagens,
  aluguel: driverType === 'renter' ? (driver.rentalFee || 0) : 0,
    financiamentoTotal: financingCostForBase,
  };
  const despesasAdm = computeAdminFeeForDriver(driver, adminFeeConfig, feeCtx).fee;

  // 7. **B√îNUS META** - Verificar se eleg√≠vel
  let bonusMetaAmount = 0;
  const goalsSnap = await adminDb
    .collection('goals')
    .where('driverId', '==', driver.id)
    .where('status', '==', 'active')
    .get();

  if (!goalsSnap.empty) {
    const goal = goalsSnap.docs[0].data() as any;
    // Verificar se atingiu meta desta semana
    if (goal.weeklyTarget && ganhosTotal >= goal.weeklyTarget) {
      bonusMetaAmount = goal.bonusAmount || 0;
      console.log(`   üéØ B√îNUS META: atingiu meta de ‚Ç¨${goal.weeklyTarget.toFixed(2)} ‚Üí B√¥nus de ‚Ç¨${bonusMetaAmount.toFixed(2)}`);
    } else {
      console.log(`   ‚ÑπÔ∏è B√¥nus meta: Ganhos ‚Ç¨${ganhosTotal.toFixed(2)} < Meta ‚Ç¨${goal.weeklyTarget?.toFixed(2) || 'N/A'} ‚Üí sem b√¥nus`);
    }
  } else {
    console.log(`   ‚ÑπÔ∏è Sem metas ativas`);
  }

  // 8. **B√îNUS INDICA√á√ÉO** - Verificar motoristas indicados
  let bonusReferralAmount = 0;
  const referralSnap = await adminDb
    .collection('drivers')
    .where('referredBy', '==', driver.id)
    .where('isApproved', '==', true)
    .get();

  if (!referralSnap.empty) {
    // B√¥nus por cada motorista indicado e aprovado
    bonusReferralAmount = referralSnap.size * 25; // ‚Ç¨25 por refer√™ncia
    console.log(`   üë• B√îNUS INDICA√á√ÉO: ${referralSnap.size} motorista(s) indicado(s) ‚Üí ‚Ç¨${bonusReferralAmount.toFixed(2)}`);
  } else {
    console.log(`   ‚ÑπÔ∏è Sem motoristas indicados ou aprovados`);
  }

  // 9. **COMISS√ÉO**
  const commissionAmount = (driver.commission?.percent || 0) > 0 
    ? (ganhosTotal * (driver.commission.percent / 100))
    : 0;
  
  if (commissionAmount > 0) {
    console.log(`   üíº COMISS√ÉO: ${driver.commission.percent}% de ‚Ç¨${ganhosTotal.toFixed(2)} ‚Üí ‚Ç¨${commissionAmount.toFixed(2)}`);
  } else {
    console.log(`   ‚ÑπÔ∏è Sem comiss√£o configurada`);
  }

  // 10. **CALCULAR REPASSE**
  // IMPORTANTE: Financiamento DESCONTA do repasse!
  const financingDeduction = financingDetails?.totalCost || 0;
  const totalDespesas = combustivel + portagens + aluguel + despesasAdm + financingDeduction;
  const repasse = ganhosMenosIVA - totalDespesas + bonusMetaAmount + bonusReferralAmount + commissionAmount;
  
  console.log(`   üìù C√ÅLCULO FINAL DO REPASSE:`);
  console.log(`      Base: ‚Ç¨${ganhosMenosIVA.toFixed(2)} (ganhos - IVA)`);
  console.log(`      - Combust√≠vel: ‚Ç¨${combustivel.toFixed(2)}`);
  console.log(`      - Portagens: ‚Ç¨${portagens.toFixed(2)}`);
  console.log(`      - Aluguel: ‚Ç¨${aluguel.toFixed(2)}`);
  console.log(`      - Taxa Adm: ‚Ç¨${despesasAdm.toFixed(2)}`);
  if (bonusMetaAmount > 0 || bonusReferralAmount > 0 || commissionAmount > 0) {
    console.log(`      + B√¥nus Meta: ‚Ç¨${bonusMetaAmount.toFixed(2)}`);
    console.log(`      + B√¥nus Indica√ß√£o: ‚Ç¨${bonusReferralAmount.toFixed(2)}`);
    console.log(`      + Comiss√£o: ‚Ç¨${commissionAmount.toFixed(2)}`);
  }
  console.log(`      = REPASSE FINAL: ‚Ç¨${repasse.toFixed(2)}`);
  if (financingDetails?.weeklyAmount) {
    console.log(`      (+ Financiamento ‚Ç¨${financingDetails.weeklyAmount.toFixed(2)} + ‚Ç¨${financingDetails.interestAmount.toFixed(2)} juros = ‚Ç¨${financingDetails.weeklyWithFees.toFixed(2)} SEPARADO)`);
  }

  // 11. **CRIAR DOCUMENTO driverPayments**
  const paymentRef = adminDb.collection('driverPayments').doc(`${driver.id}_${weekId}`);
  
  const payment: DriverPayment = {
    id: paymentRef.id,
    recordId: `${driver.id}_${weekId}`,
    driverId: driver.id,
    driverName: driver.fullName || driver.name,
    weekId,
    // capturar datas da pr√≥pria semana a partir de dataWeekly
    weekStart: (weeklyData[0]?.weekStart) || new Date().toISOString().split('T')[0],
    weekEnd: (weeklyData[0]?.weekEnd) || new Date().toISOString().split('T')[0],
    currency: 'EUR',
    baseAmount: repasse,
    baseAmountCents: Math.round(repasse * 100),
    bonusAmount: 0,
    bonusCents: 0,
    discountAmount: 0,
    discountCents: 0,
    totalAmount: repasse,
    totalAmountCents: Math.round(repasse * 100),
    iban: driver.banking?.iban,
    paymentDate: new Date().toISOString(),
    createdAt: new Date().toISOString(),
    updatedAt: new Date().toISOString(),
    adminFeePercentage: driver.adminFee?.mode === 'percent' ? driver.adminFee.percentValue : 0,
    adminFeeValue: despesasAdm,
    adminFeeCents: Math.round(despesasAdm * 100),
    combustivel,
    portagens,
    aluguel,
    // ‚úÖ ADICIONADO: Uber e Bolt salvos tamb√©m no n√≠vel principal
    uberTotal: ganhosPorIntegracao['uber'] || 0,
    boltTotal: ganhosPorIntegracao['bolt'] || 0,
    // Conveni√™ncia: armazenar campos que facilitam enriquecimento/preview
    ganhosTotal,
    ivaValor,
    ganhosMenosIVA,
    despesasAdm,
    financingDetails, // ‚úÖ Agora sempre √© um objeto, nunca undefined
    bonusMetaAmount,
    bonusReferralAmount,
    commissionAmount,
    repasse,
    recordSnapshot: {
      // APENAS dados de INPUT (necess√°rios para reprocessar se houver bug)
      driverId: driver.id,
      driverName: driver.fullName || driver.name,
      weekId,
      type: driverType,
      // Dados calculados completos
      ganhosTotal,
      uberTotal: ganhosPorIntegracao['uber'] || 0,
      boltTotal: ganhosPorIntegracao['bolt'] || 0,
      prio: ganhosPorIntegracao['myprio'] || 0,
      ivaValor,
      ganhosMenosIVA,
      combustivel,
      viaverde: portagens,
      aluguel,
      despesasAdm,
      commissionAmount,
      bonusMetaAmount,
      bonusReferralAmount,
      totalDespesas,
      repasse,
      // Financiamento COMPLETO
      financingDetails,
      bonusMetaPending: [],
      referralBonusPending: [],
      totalBonusAmount: bonusMetaAmount + bonusReferralAmount,
      bonusMetaPaid: [],
      referralBonusPaid: [],
      isLocatario: driverType === 'renter',
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
    } as any,
    paymentStatus: 'pending' as const,
  };

  // 12. **SALVAR em driverPayments**
  await paymentRef.set(payment);
  
  console.log(`   ‚úÖ Documento salvo em driverPayments/${paymentRef.id}`);
  console.log(`   üìä Valores: Ganhos=‚Ç¨${ganhosTotal.toFixed(2)}, IVA=‚Ç¨${ivaValor.toFixed(2)}, L√≠quido=‚Ç¨${ganhosMenosIVA.toFixed(2)}`);
  console.log(`   üí∏ Despesas: Adm=‚Ç¨${despesasAdm.toFixed(2)}, Comb=‚Ç¨${combustivel.toFixed(2)}, Portagens=‚Ç¨${portagens.toFixed(2)}, Aluguel=‚Ç¨${aluguel.toFixed(2)}`);
  if (financingDetails) {
    console.log(`   üí≥ Financiamento: Parcela=‚Ç¨${financingDetails.weeklyAmount.toFixed(2)}, Juros=${financingDetails.weeklyInterest}%, Total=‚Ç¨${financingDetails.totalCost.toFixed(2)}`);
  }
  console.log(`   üí∞ REPASSE FINAL: ‚Ç¨${repasse.toFixed(2)}\n`);

  return payment;
}
