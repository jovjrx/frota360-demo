/**
 * ============================================================================
 * INTEGRATION SERVICE - Gerenciador de Integra√ß√µes TVDE
 * ============================================================================
 * 
 * Servi√ßo centralizado para gerenciar todas as integra√ß√µes com plataformas TVDE
 * 
 * FUNCIONALIDADES:
 * ‚úÖ CRUD de integra√ß√µes no Firestore
 * ‚úÖ Cache em mem√≥ria com TTL configur√°vel
 * ‚úÖ Valida√ß√£o de credenciais
 * ‚úÖ Teste de conex√£o
 * ‚úÖ Estat√≠sticas e monitoramento
 * ‚úÖ Criptografia de credenciais sens√≠veis
 * 
 * USO:
 * ```typescript
 * import { IntegrationService } from '@/lib/integrations/integration-service';
 * 
 * const service = IntegrationService.getInstance();
 * const cartrack = await service.getIntegration('cartrack');
 * ```
 * 
 * ============================================================================
 */

import { getFirestore, Timestamp } from 'firebase-admin/firestore';
import admin from 'firebase-admin';
import { 
  Integration,
  IntegrationPlatform,
  IntegrationStatus,
  CreateIntegrationData,
  UpdateIntegrationData,
  IntegrationTestResult,
  IntegrationCache,
  DEFAULT_INTEGRATION_CONFIGS,
  REQUIRED_CREDENTIALS,
} from '@/schemas/integration';

// ============================================================================
// CONFIGURA√á√ïES
// ============================================================================

const CACHE_TTL = 5 * 60 * 1000; // 5 minutos em milissegundos
const COLLECTION_NAME = 'integrations';

// ============================================================================
// INICIALIZA√á√ÉO FIREBASE
// ============================================================================

function initializeFirebase() {
  if (!admin.apps.length) {
    try {
      // Tenta carregar do arquivo JSON
      const serviceAccount = require('../../conduz-pt.json');
      admin.initializeApp({
        credential: admin.credential.cert(serviceAccount),
      });
      console.log('üî• Firebase Admin inicializado');
    } catch (error) {
      console.warn('‚ö†Ô∏è  N√£o foi poss√≠vel inicializar Firebase Admin automaticamente');
      throw new Error('Firebase Admin n√£o inicializado. Configure conduz-pt.json ou inicialize manualmente.');
    }
  }
}

// ============================================================================
// CLASSE PRINCIPAL
// ============================================================================

export class IntegrationService {
  private static instance: IntegrationService;
  private cache: Map<IntegrationPlatform, IntegrationCache> = new Map();
  private db;

  // Singleton pattern
  private constructor() {
    initializeFirebase();
    this.db = getFirestore();
    console.log('üîß IntegrationService inicializado');
  }

  public static getInstance(): IntegrationService {
    if (!IntegrationService.instance) {
      IntegrationService.instance = new IntegrationService();
    }
    return IntegrationService.instance;
  }

  // ==========================================================================
  // CRUD OPERATIONS
  // ==========================================================================

  /**
   * Cria uma nova integra√ß√£o no Firestore
   */
  async createIntegration(data: CreateIntegrationData): Promise<Integration> {
    console.log(`üìù Criando integra√ß√£o: ${data.platform}`);

    // Validar credenciais obrigat√≥rias
    this.validateCredentials(data.platform, data.credentials);

    const now = Timestamp.now();
    const integration: Integration = {
      platform: data.platform,
      name: data.name,
      type: data.type,
      enabled: data.enabled ?? true,
      status: data.oauth ? 'pending' : 'active',
      credentials: data.credentials,
      config: data.config,
      oauth: data.oauth,
      stats: {
        totalRequests: 0,
        successfulRequests: 0,
        failedRequests: 0,
      },
      metadata: {
        createdAt: now,
        updatedAt: now,
      },
    };

    await this.db.collection(COLLECTION_NAME).doc(data.platform).set(integration);
    
    // Invalidar cache
    this.invalidateCache(data.platform);
    
    console.log(`‚úÖ Integra√ß√£o criada: ${data.platform}`);
    return integration;
  }

  /**
   * Busca uma integra√ß√£o (com cache)
   */
  async getIntegration(platform: IntegrationPlatform): Promise<Integration | null> {
    // Verificar cache primeiro
    const cached = this.getCached(platform);
    if (cached) {
      console.log(`üíæ Cache hit: ${platform}`);
      return cached.data;
    }

    console.log(`üîç Buscando integra√ß√£o: ${platform}`);

    const doc = await this.db.collection(COLLECTION_NAME).doc(platform).get();
    
    if (!doc.exists) {
      console.log(`‚ö†Ô∏è Integra√ß√£o n√£o encontrada: ${platform}`);
      return null;
    }

    const integration = doc.data() as Integration;
    
    // Salvar no cache
    this.setCache(platform, integration);
    
    return integration;
  }

  /**
   * Lista todas as integra√ß√µes
   */
  async getAllIntegrations(onlyEnabled = false): Promise<Integration[]> {
    console.log(`üìã Listando integra√ß√µes${onlyEnabled ? ' (apenas ativas)' : ''}`);

    const snapshot = await this.db.collection(COLLECTION_NAME).get();
    let integrations = snapshot.docs.map((doc) => {
      const data = doc.data() as Integration & { id?: string; status?: IntegrationStatus; errorMessage?: string };
      const platform = (data.platform ?? data.id ?? doc.id) as IntegrationPlatform;

      const derivedStatus: IntegrationStatus =
        data.status ??
        ((data as any).errorMessage
          ? 'error'
          : data.enabled === false
          ? 'inactive'
          : 'active');

      const normalized: Integration = {
        platform,
        name: data.name ?? platform.toUpperCase(),
        type: data.type ?? 'api',
        enabled: data.enabled ?? false,
        status: derivedStatus,
        credentials: { ...(data.credentials ?? {}) },
        config: { ...(data.config ?? {}), baseUrl: data.config?.baseUrl ?? '' },
        oauth: data.oauth,
        stats: {
          totalRequests: data.stats?.totalRequests ?? (data as any).totalRequests ?? 0,
          successfulRequests: data.stats?.successfulRequests ?? (data as any).successfulRequests ?? 0,
          failedRequests: data.stats?.failedRequests ?? (data as any).failedRequests ?? 0,
          lastSync: data.stats?.lastSync ?? (data as any).lastSync,
          lastSuccess: data.stats?.lastSuccess ?? (data as any).lastSuccess,
          lastError: data.stats?.lastError ?? (data as any).lastError,
          errorMessage:
            data.stats?.errorMessage ?? (data as any).errorMessage ?? (data as any).metadata?.errorMessage ?? undefined,
        },
        metadata: {
          createdAt: data.metadata?.createdAt ?? Timestamp.now(),
          updatedAt: data.metadata?.updatedAt ?? Timestamp.now(),
          createdBy: data.metadata?.createdBy,
          updatedBy: data.metadata?.updatedBy,
        },
      };

      return normalized;
    });

    if (onlyEnabled) {
      integrations = integrations.filter(i => i.enabled);
    }

    return integrations;
  }

  /**
   * Atualiza uma integra√ß√£o
   */
  async updateIntegration(
    platform: IntegrationPlatform,
    data: UpdateIntegrationData
  ): Promise<void> {
    console.log(`üìù Atualizando integra√ß√£o: ${platform}`);

    const updateData: any = {
      ...data,
      'metadata.updatedAt': Timestamp.now(),
    };

    await this.db.collection(COLLECTION_NAME).doc(platform).update(updateData);
    
    // Invalidar cache
    this.invalidateCache(platform);
    
    console.log(`‚úÖ Integra√ß√£o atualizada: ${platform}`);
  }

  /**
   * Deleta uma integra√ß√£o
   */
  async deleteIntegration(platform: IntegrationPlatform): Promise<void> {
    console.log(`üóëÔ∏è Deletando integra√ß√£o: ${platform}`);

    await this.db.collection(COLLECTION_NAME).doc(platform).delete();
    
    // Invalidar cache
    this.invalidateCache(platform);
    
    console.log(`‚úÖ Integra√ß√£o deletada: ${platform}`);
  }

  // ==========================================================================
  // OPERA√á√ïES ESPEC√çFICAS
  // ==========================================================================

  /**
   * Atualiza credenciais de uma integra√ß√£o
   */
  async updateCredentials(
    platform: IntegrationPlatform,
    credentials: Record<string, string>
  ): Promise<void> {
    this.validateCredentials(platform, credentials);

    await this.updateIntegration(platform, {
      credentials,
      status: 'active',
    });
  }

  /**
   * Atualiza OAuth tokens
   */
  async updateOAuthTokens(
    platform: IntegrationPlatform,
    oauth: Integration['oauth']
  ): Promise<void> {
    await this.updateIntegration(platform, {
      oauth,
      status: 'active',
    });

    console.log(`üîê OAuth tokens atualizados: ${platform}`);
  }

  /**
   * Registra uma requisi√ß√£o bem-sucedida
   */
  async recordSuccess(platform: IntegrationPlatform): Promise<void> {
    const integration = await this.getIntegration(platform);
    if (!integration) return;

    await this.updateIntegration(platform, {
      status: 'active',
      stats: {
        ...integration.stats,
        lastSync: Timestamp.now(),
        lastSuccess: Timestamp.now(),
        totalRequests: integration.stats.totalRequests + 1,
        successfulRequests: integration.stats.successfulRequests + 1,
      },
    });
  }

  /**
   * Registra uma requisi√ß√£o com erro
   */
  async recordError(platform: IntegrationPlatform, error: string): Promise<void> {
    const integration = await this.getIntegration(platform);
    if (!integration) return;

    await this.updateIntegration(platform, {
      status: 'error',
      stats: {
        ...integration.stats,
        lastError: Timestamp.now(),
        errorMessage: error,
        totalRequests: integration.stats.totalRequests + 1,
        failedRequests: integration.stats.failedRequests + 1,
      },
    });
  }

  /**
   * Ativa/desativa uma integra√ß√£o
   */
  async toggleIntegration(
    platform: IntegrationPlatform,
    enabled: boolean
  ): Promise<void> {
    await this.updateIntegration(platform, {
      enabled,
      status: enabled ? 'active' : 'inactive',
    });

    console.log(`üîÑ Integra√ß√£o ${enabled ? 'ativada' : 'desativada'}: ${platform}`);
  }

  // ==========================================================================
  // VALIDA√á√ÉO E TESTE
  // ==========================================================================

  /**
   * Valida se todas as credenciais obrigat√≥rias est√£o presentes
   */
  private validateCredentials(
    platform: IntegrationPlatform,
    credentials: Record<string, string>
  ): void {
    const required = REQUIRED_CREDENTIALS[platform];
    const missing: string[] = [];

    required.forEach(key => {
      if (!credentials[key] || credentials[key].trim() === '') {
        missing.push(key);
      }
    });

    if (missing.length > 0) {
      throw new Error(
        `Credenciais obrigat√≥rias faltando para ${platform}: ${missing.join(', ')}`
      );
    }
  }

  /**
   * Testa conex√£o com uma integra√ß√£o
   */
  async testConnection(platform: IntegrationPlatform): Promise<IntegrationTestResult> {
    const startTime = Date.now();
    
    try {
      const integration = await this.getIntegration(platform);
      
      if (!integration) {
        return {
          success: false,
          platform,
          error: 'Integra√ß√£o n√£o encontrada',
          testedAt: Timestamp.now(),
        };
      }

      if (!integration.enabled) {
        return {
          success: false,
          platform,
          error: 'Integra√ß√£o desabilitada',
          testedAt: Timestamp.now(),
        };
      }

      // Aqui voc√™ pode adicionar l√≥gica espec√≠fica de teste por plataforma
      // Por enquanto, apenas verifica se as credenciais est√£o presentes
      this.validateCredentials(platform, integration.credentials);

      const responseTime = Date.now() - startTime;

      return {
        success: true,
        platform,
        message: 'Conex√£o OK',
        responseTime,
        testedAt: Timestamp.now(),
      };
    } catch (error) {
      const responseTime = Date.now() - startTime;
      
      return {
        success: false,
        platform,
        error: error instanceof Error ? error.message : 'Erro desconhecido',
        responseTime,
        testedAt: Timestamp.now(),
      };
    }
  }

  // ==========================================================================
  // SETUP E INICIALIZA√á√ÉO
  // ==========================================================================

  /**
   * Inicializa todas as integra√ß√µes com valores padr√£o
   * (√∫til para primeira configura√ß√£o)
   */
  async initializeDefaultIntegrations(): Promise<void> {
    console.log('üöÄ Inicializando integra√ß√µes padr√£o...');

    for (const [platform, defaultConfig] of Object.entries(DEFAULT_INTEGRATION_CONFIGS)) {
      const existing = await this.getIntegration(platform as IntegrationPlatform);
      
      if (!existing) {
        console.log(`   üìù Criando ${platform}...`);
        
        await this.createIntegration({
          platform: platform as IntegrationPlatform,
          name: defaultConfig.name!,
          type: defaultConfig.type!,
          enabled: false, // Desabilitado por padr√£o at√© configurar credenciais
          credentials: {},
          config: defaultConfig.config!,
        });
      } else {
        console.log(`   ‚úÖ ${platform} j√° existe`);
      }
    }

    console.log('‚úÖ Integra√ß√µes inicializadas!');
  }

  /**
   * Atualiza configura√ß√µes a partir de vari√°veis de ambiente
   */
  async syncFromEnv(): Promise<void> {
    console.log('üîÑ Sincronizando com vari√°veis de ambiente...');

    // Cartrack
    if (process.env.CARTRACK_USERNAME && process.env.CARTRACK_API_KEY) {
      await this.upsertIntegration('cartrack', {
        credentials: {
          username: process.env.CARTRACK_USERNAME,
          apiKey: process.env.CARTRACK_API_KEY,
        },
      });
    }

    // Bolt
    if (process.env.BOLT_CLIENT_ID && process.env.BOLT_CLIENT_SECRET) {
      await this.upsertIntegration('bolt', {
        credentials: {
          clientId: process.env.BOLT_CLIENT_ID,
          clientSecret: process.env.BOLT_CLIENT_SECRET,
        },
      });
    }

    // Uber
    if (process.env.UBER_CLIENT_ID && process.env.UBER_CLIENT_SECRET) {
      await this.upsertIntegration('uber', {
        credentials: {
          clientId: process.env.UBER_CLIENT_ID,
          clientSecret: process.env.UBER_CLIENT_SECRET,
          orgUuid: process.env.UBER_ORG_UUID || '',
        },
      });
    }

    console.log('‚úÖ Sincroniza√ß√£o completa!');
  }

  /**
   * Cria ou atualiza uma integra√ß√£o
   */
  private async upsertIntegration(
    platform: IntegrationPlatform,
    data: Partial<UpdateIntegrationData>
  ): Promise<void> {
    const existing = await this.getIntegration(platform);
    
    if (existing) {
      await this.updateIntegration(platform, data);
    } else {
      const defaultConfig = DEFAULT_INTEGRATION_CONFIGS[platform];
      await this.createIntegration({
        platform,
        name: defaultConfig.name!,
        type: defaultConfig.type!,
        credentials: data.credentials || {},
        config: defaultConfig.config!,
        enabled: true,
      });
    }
  }

  // ==========================================================================
  // CACHE MANAGEMENT
  // ==========================================================================

  /**
   * Obt√©m integra√ß√£o do cache
   */
  private getCached(platform: IntegrationPlatform): IntegrationCache | null {
    const cached = this.cache.get(platform);
    
    if (!cached) return null;
    
    // Verificar se expirou
    if (Date.now() > cached.expiresAt) {
      this.cache.delete(platform);
      return null;
    }
    
    return cached;
  }

  /**
   * Salva integra√ß√£o no cache
   */
  private setCache(platform: IntegrationPlatform, data: Integration): void {
    const now = Date.now();
    this.cache.set(platform, {
      data,
      cachedAt: now,
      expiresAt: now + CACHE_TTL,
    });
  }

  /**
   * Invalida cache de uma integra√ß√£o espec√≠fica
   */
  private invalidateCache(platform: IntegrationPlatform): void {
    this.cache.delete(platform);
    console.log(`üóëÔ∏è Cache invalidado: ${platform}`);
  }

  /**
   * Limpa todo o cache
   */
  public clearCache(): void {
    this.cache.clear();
    console.log('üóëÔ∏è Cache completamente limpo');
  }

  /**
   * Obt√©m estat√≠sticas do cache
   */
  public getCacheStats(): {
    size: number;
    platforms: IntegrationPlatform[];
  } {
    return {
      size: this.cache.size,
      platforms: Array.from(this.cache.keys()),
    };
  }
}

// ============================================================================
// EXPORTS
// ============================================================================

// Export singleton instance
export default IntegrationService.getInstance();
